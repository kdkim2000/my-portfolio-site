# .github/workflows/deploy.yml
name: Deploy to GitHub Pages

on:
  # main 브랜치에 push될 때 자동 배포
  push:
    branches: [ main ]
  
  # 수동 실행 가능
  workflow_dispatch:

# 권한 설정 (GitHub Pages 배포용)
permissions:
  contents: read
  pages: write
  id-token: write

# 동시 실행 방지
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 빌드 작업
  build:
    runs-on: ubuntu-latest
    
    steps:
    # 1. 소스코드 체크아웃
    - name: Checkout
      uses: actions/checkout@v4
      
    # 2. Node.js 설정
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    # 3. 의존성 설치
    - name: Install dependencies
      run: npm ci
      
    # 4. 린트 검사
    - name: Run ESLint
      run: npm run lint
      continue-on-error: true
      
    # 5. 타입 검사
    - name: Type check
      run: npm run type-check
      continue-on-error: true
      
    # 6. 빌드 실행
    - name: Build
      run: npm run build
      env:
        NODE_ENV: production
        
    # 7. 빌드 결과물 업로드
    - name: Upload build artifacts
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./dist

  # 배포 작업
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    # GitHub Pages에 배포
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

---

# .github/workflows/ci.yml (추가 CI 워크플로우)
name: Continuous Integration

on:
  # PR 생성 시 자동 실행
  pull_request:
    branches: [ main, develop ]
  
  # push 시에도 실행 (main 제외)
  push:
    branches-ignore: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
    # 1. 소스코드 체크아웃
    - name: Checkout
      uses: actions/checkout@v4
      
    # 2. Node.js 설정
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    # 3. 의존성 설치
    - name: Install dependencies
      run: npm ci
      
    # 4. 린트 검사
    - name: Run ESLint
      run: npm run lint
      
    # 5. 타입 검사
    - name: Type check
      run: npm run type-check
      
    # 6. 테스트 실행 (있다면)
    - name: Run tests
      run: npm test
      continue-on-error: true
      
    # 7. 빌드 테스트
    - name: Build test
      run: npm run build
      
    # 8. Lighthouse CI (성능 측정)
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouserc.js'
        uploadArtifacts: true
        temporaryPublicStorage: true
      continue-on-error: true